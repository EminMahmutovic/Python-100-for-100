                        ### Hurdle 1 ###
    #Define a right turn
#def turn_right():
#    turn_left()
#    turn_left()
#    turn_left()

    #Define a jump
#def jump():
#    turn_left()
#    move()
#    turn_right()
#    move()
#    turn_right()
#    move()
#    turn_left()

    #For loop solution
#for step in range(6):
#    jump()

    #While loop solution
#number_of_hurdles > 0

#while number_of_hurdles > 0:
#    jump()
#    number_of_hurdles -= 1
#    print(number_of_hurdles)


                        ### Hurdle 2 ###
#while at_goal() != True:
#    jump()


                        ### Hurdle 3 ###

    # Redefine jump without the initial move()
    # to not run into a wall.

#while not at_goal():
#    if wall_in_front():
#        jump()
#    else:
#        move()

                        ### Hurdle 4 ###

    # Redefine jump to account for variable
    # wall height before turning

#def jump():
#    turn_left()
#    while wall_on_right():
#        move()
#    turn_right()
#    move()
#    turn_right()
#    while front_is_clear():
#        move()
#    turn_left()

#while not at_goal():
#    if wall_in_front():
#        jump()
#    else:
#        move()


                                ### Maze ###
#while not at_goal():
#    if right_is_clear():
#        turn_right()
#        move()
#    elif front_is_clear():
#        move()
#    else:
#        turn_left()

    # There is a slight chance that the robot gets
    # trapped in an infinite loop if it gets placed
    # in a specific position on the maze. Debugging
    # this error is not included in the code because
    # it is an intermediate level solution, and this
    # general example is still at beginner level.
